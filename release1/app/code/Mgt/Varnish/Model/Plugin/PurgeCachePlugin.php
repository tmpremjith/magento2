<?php
 namespace Mgt\Varnish\Model\Plugin; use Laminas\Uri\Uri; class PurgeCachePlugin extends \Magento\CacheInvalidate\Model\PurgeCache { const REQUEST_TIMEOUT = 5; protected $coreLogger; protected $logger; protected $varnishConfig; protected $urlCollection; protected $objectManager; protected static $tagsRegistry = []; public function __construct(\Magento\PageCache\Model\Cache\Server $cacheServer, \Magento\CacheInvalidate\Model\SocketFactory $socketAdapterFactory, \Mgt\Varnish\Model\Cache\Config $varnishConfig, \Mgt\Varnish\Model\ResourceModel\Url\Collection $urlCollection, \Magento\Framework\ObjectManagerInterface $objectManager, \Psr\Log\LoggerInterface $coreLogger, \Mgt\Varnish\Model\Logger\Logger $logger) { goto a9ad0; a9ad0: $this->cacheServer = $cacheServer; goto A2dea; ac261: $this->logger = $logger; goto F8b71; f4c53: $this->objectManager = $objectManager; goto Ca759; d135a: $this->coreLogger = $coreLogger; goto ac261; Ca759: $this->urlCollection = $urlCollection; goto d135a; A2dea: $this->socketAdapterFactory = $socketAdapterFactory; goto e59d8; e59d8: $this->varnishConfig = $varnishConfig; goto f4c53; F8b71: } public function sendPurgeRequest($tagsPattern) { goto d1790; c3f11: foreach ($tags as $tag) { $tagsPattern[] = sprintf($pattern, $tag); f73c3: } goto ea307; bd22d: $headers = [self::HEADER_X_MAGENTO_TAGS_PATTERN => $tagsPattern]; goto dd3a2; be455: if ($tags) { goto Ed080; } goto c7a61; d1790: $tags = []; goto b4725; Dd57f: $pattern = "\50\x28\x5e\174\x2c\x29\45\x73\x28\54\174\x24\51\51"; goto Fb1d9; f8b76: df13b: goto eea8e; F5721: bb387: goto be455; d5296: fdf6f: goto Fc664; b1a54: foreach ($tagsPattern as $tag) { goto ea00b; C0724: $tags[] = $tag; goto eeffd; eeffd: self::$tagsRegistry[$tag] = $tag; goto Ef0cc; ea00b: if (isset(self::$tagsRegistry[$tag])) { goto Aa425; } goto C0724; Ef0cc: Aa425: goto c2df2; c2df2: F16c4: goto F723d; F723d: } goto F5721; bebde: Ed080: goto Dd57f; eea8e: da05a: goto c10c8; ac2a5: c9dab: goto b1a54; c7a61: return true; goto bebde; c10c8: goto d6241; goto ac2a5; dd3a2: $this->_sendPurgeRequest($headers); goto ef7fb; C191f: $this->addToQueue($tags); goto d5296; Cc205: return true; goto D4184; C6bf9: $tagsPattern = implode("\174", array_unique($tagsPattern)); goto Ad4ef; e383b: if (!(true === $isCacheWarmerEnabled)) { goto fdf6f; } goto C191f; Fb1d9: $tagsPattern = []; goto c3f11; ea307: db922: goto c3cc1; D7491: switch ($tagsPattern) { case "\x2e\52": $logMessage = "\x54\150\145\x20\x77\x68\x6f\154\145\40\126\x61\162\x6e\151\x73\x68\x20\103\x61\x63\x68\x65\x20\x68\141\163\40\x62\x65\145\156\40\x70\x75\x72\147\x65\144"; goto da05a; } goto f8b76; ef7fb: $isCacheWarmerEnabled = $this->varnishConfig->isCacheWarmerEnabled(); goto e383b; E3bc2: $logMessage = ''; goto D7491; Ad4ef: d6241: goto bd22d; b4725: if (true === is_array($tagsPattern)) { goto c9dab; } goto E3bc2; Fc664: $this->logMessage($logMessage); goto Cc205; c3cc1: $logMessage = sprintf("\x56\x61\x72\x6e\151\x73\x68\40\x43\141\143\150\145\x20\x70\x75\162\x67\x65\x64\x20\142\x79\40\x66\157\x6c\x6c\x6f\167\151\x6e\x67\x20\164\x61\147\163\x3a\x20\x25\163", print_r($tags, true)); goto C6bf9; D4184: } public function addToQueue(array $tags) { goto D49ac; ece29: try { goto ee685; d0f6f: if (!count($urls)) { goto E4f80; } goto c880f; d6b57: $urlQueue->addToQueue($urls); goto C24a3; b4e1c: Dc50c: goto d0f6f; ee685: $urls = []; goto ec69a; c880f: $urlQueue = $this->objectManager->create("\115\x67\x74\134\x56\x61\162\x6e\x69\163\150\x5c\115\x6f\144\145\x6c\134\x55\162\154\x51\x75\x65\x75\145"); goto d6b57; C24a3: E4f80: goto A2dce; ec69a: $this->urlCollection->addTagsFilter($tags); goto Cf8a7; Cf8a7: foreach ($this->urlCollection as $url) { $urls[] = ["\x73\164\x6f\x72\145\x5f\151\x64" => $url->getStoreId(), "\160\x61\164\x68" => $url->getPath(), "\160\x72\151\x6f\162\151\x74\x79" => \Mgt\Varnish\Model\UrlQueue::PRIORITY_HIGH]; b4fb7: } goto b4e1c; A2dce: } catch (\Exception $e) { $errorMessage = sprintf("\101\156\x20\145\162\x72\x6f\162\40\157\x63\x63\165\x72\162\x65\x64\40\144\x75\x72\x69\156\147\40\x61\144\x64\151\156\x67\x20\x74\x6f\40\161\165\x65\165\x65\x2c\x20\145\x72\162\x6f\x72\x20\x6d\145\163\163\x61\x67\145\72\x20\45\x73", $e->getMessage()); $this->coreLogger->error($errorMessage); } goto F71b1; D49ac: if (!count($tags)) { goto A62be; } goto ece29; F71b1: A62be: goto D0bb0; D0bb0: } public function purgeStoreRequest(\Magento\Store\Model\Store $store) { goto C9c77; C9c77: $uri = new Uri($store->getBaseUrl()); goto D1ecf; Fa731: $logMessage = sprintf("\x53\164\x6f\x72\x65\40\167\x69\x74\150\40\x62\x61\x73\x65\40\x75\162\154\x3a\x20\x25\163\x20\x28\x49\x44\x3a\x20\x25\163\x29\x20\x68\141\163\x20\142\145\145\156\x20\x70\165\162\147\x65\x64", $store->getBaseUrl(), $store->getStoreId()); goto E1067; bad5f: $this->_sendPurgeRequest($headers); goto Fa731; D1ecf: $headers = ["\x48\117\123\x54" => $uri->getHost()]; goto bad5f; E1067: $this->logMessage($logMessage); goto abd9b; abd9b: } public function purgeUrlRequest($url) { goto f0cf5; Eed5c: $headers = ["\x48\x4f\123\x54" => $uri->getHost()]; goto ab646; E97db: $this->logMessage($logMessage); goto ffee3; f0cf5: $uri = new Uri($url); goto Eed5c; B1db7: $logMessage = sprintf("\125\x72\154\72\x20\45\163\x20\x68\141\x73\x20\x62\145\145\156\40\160\165\x72\147\x65\144", $url); goto E97db; ab646: $this->_sendPurgeRequest($headers, $uri->getPath()); goto B1db7; ffee3: } protected function _sendPurgeRequest(array $headers, $path = null) { goto ae17d; Ced58: $socketAdapter->setOptions(["\x74\151\155\145\x6f\x75\164" => self::REQUEST_TIMEOUT]); goto Bcdb5; c637c: C3e1a: goto f482c; Bcdb5: $servers = $this->getCacheServers(); goto c6915; c6915: foreach ($servers as $server) { try { goto F01ca; A9bec: $socketAdapter->connect($server->getHost(), $server->getPort()); goto f9d3c; C983f: $server->setPath($path); goto af4a7; ed92d: $socketAdapter->close(); goto A5b22; af4a7: Dcaaa: goto A9bec; f9d3c: $socketAdapter->write("\x50\125\122\x47\105", $server, "\x31\56\61", $headers); goto ed92d; F01ca: if (!(null !== $path)) { goto Dcaaa; } goto C983f; A5b22: } catch (\Exception $e) { goto Ae408; Ae408: $errorMessage = sprintf("\101\x6e\40\145\x72\162\157\x72\40\x6f\143\143\x75\162\x72\145\x64\x20\144\x75\162\x69\x6e\147\40\x70\x75\x72\147\x69\156\147\x2c\40\145\x72\x72\157\x72\x20\155\x65\x73\x73\x61\x67\145\x3a\40\x22\45\x73\42", $e->getMessage()); goto e09d4; Beddc: throw new \Exception($errorMessage); goto Bc065; e09d4: $this->logMessage($errorMessage, true); goto Beddc; Bc065: } E5d62: } goto c637c; ae17d: $socketAdapter = $this->socketAdapterFactory->create(); goto Ced58; f482c: } protected function logMessage($message, $force = false) { goto cff3a; D3d9a: if (!(true === $isDebugModeEnabled || true === $force)) { goto f1f0f; } goto C71ee; cff3a: $isDebugModeEnabled = $this->varnishConfig->isDebugModeEnabled(); goto D3d9a; C71ee: $this->logger->debug($message); goto a3f5a; a3f5a: f1f0f: goto a5c66; a5c66: } protected function getCacheServers() { goto E03f8; c5ae5: foreach ($serverList as $server) { goto ca94f; E0e9d: $uri->setHost($host); goto f0d1b; F1291: $uri->setScheme("\150\x74\164\x70"); goto f0897; f0d1b: $uri->setPort($port); goto b242a; f0897: $uri->setQuery(null); goto Ec1e5; B8a7b: e41e6: goto d2555; Ffe71: $uri = new Uri(); goto E0e9d; ca94f: list($host, $port) = explode("\72", $server); goto Ffe71; Ec1e5: $cacheServers[] = $uri; goto B8a7b; b242a: $uri->setPath("\x2f"); goto F1291; d2555: } goto A105c; A105c: Eba0d: goto f80ef; f80ef: return $cacheServers; goto B64b5; b58eb: $serverList = $this->varnishConfig->getServerList(); goto c5ae5; E03f8: $cacheServers = []; goto b58eb; B64b5: } }
