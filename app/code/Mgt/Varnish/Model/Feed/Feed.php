<?php
 namespace Mgt\Varnish\Model\Feed; use Magento\Framework\Config\ConfigOptionsListConstants; use Laminas\Http\Client as HttpClient; class Feed extends \Magento\Framework\Model\AbstractModel { const FEED_URL = "\x68\164\x74\x70\x3a\57\x2f\x66\145\145\x64\x2e\155\x67\x74\x2d\143\x6f\155\x6d\145\162\x63\145\x2e\x63\157\155\57"; const UPDATE_FREQUENCY = 21600; const SEVERITY_INFORMATION = 4; protected $backendConfig; protected $inboxFactory; protected $storeManager; protected $deploymentConfig; protected $productMetadata; protected $urlBuilder; public function __construct(\Magento\Framework\Model\Context $context, \Magento\Framework\Registry $registry, \Magento\Backend\App\ConfigInterface $backendConfig, \Magento\AdminNotification\Model\InboxFactory $inboxFactory, \Magento\Store\Model\StoreManagerInterface $storeManager, \Magento\Framework\App\DeploymentConfig $deploymentConfig, \Magento\Framework\App\ProductMetadataInterface $productMetadata, \Magento\Framework\UrlInterface $urlBuilder, \Magento\Framework\Model\ResourceModel\AbstractResource $resource = null, \Magento\Framework\Data\Collection\AbstractDb $resourceCollection = null, array $data = []) { goto E1e17; d9f5f: $this->deploymentConfig = $deploymentConfig; goto Caa34; C3a79: $this->inboxFactory = $inboxFactory; goto C22c3; E1e17: parent::__construct($context, $registry, $resource, $resourceCollection, $data); goto E6e9e; C22c3: $this->storeManager = $storeManager; goto d9f5f; E6e9e: $this->backendConfig = $backendConfig; goto C3a79; d7eb9: $this->urlBuilder = $urlBuilder; goto e5845; Caa34: $this->productMetadata = $productMetadata; goto d7eb9; e5845: } protected function _construct() { } public function checkUpdate() { goto A5979; f8b10: C4d43: goto df975; ed13a: $feedData = []; goto ed6ba; d914a: return $this; goto ba76c; A1d12: $this->inboxFactory->create()->parse(array_reverse($feedData)); goto A1bdc; a2e6d: if (!($frequency + $lastUpdate > time())) { goto e0b4d; } goto d914a; df975: $this->setLastUpdate(); goto Ad1e6; A1bdc: ce1e7: goto f8b10; Dd11b: if (!($feedXml && isset($feedXml->channel) && isset($feedXml->channel->item))) { goto C4d43; } goto F2615; ed6ba: $feedXml = $this->getFeedData(); goto Cd94d; F2615: foreach ($feedXml->channel->item as $item) { goto Bb269; F7071: b011b: goto f0cc1; a2e4b: if (!($installDate <= $itemPublicationDate)) { goto C5516; } goto edcf3; edcf3: $feedData[] = ["\x73\x65\166\x65\x72\x69\x74\171" => self::SEVERITY_INFORMATION, "\144\141\x74\x65\137\141\x64\x64\145\x64" => date("\x59\55\155\55\x64\x20\110\x3a\151\x3a\163", $itemPublicationDate), "\164\x69\x74\154\145" => (string) $item->title, "\144\145\x73\x63\x72\151\160\164\151\157\x6e" => (string) $item->description, "\x75\162\154" => (string) $item->link]; goto a49a4; a49a4: C5516: goto F7071; Bb269: $itemPublicationDate = strtotime((string) $item->pubDate); goto a2e4b; f0cc1: } goto d9676; Cd94d: $installDate = strtotime($this->deploymentConfig->get(ConfigOptionsListConstants::CONFIG_PATH_INSTALL_DATE)); goto Dd11b; Ad1e6: return $this; goto acc9c; A5979: $frequency = $this->getFrequency(); goto dc2e2; A5ca6: if (!$feedData) { goto ce1e7; } goto A1d12; dc2e2: $lastUpdate = $this->getLastUpdate(); goto a2e6d; d9676: Cf19c: goto A5ca6; ba76c: e0b4d: goto ed13a; acc9c: } public function getFrequency() { return self::UPDATE_FREQUENCY; } public function getLastUpdate() { return $this->_cacheManager->load("\155\147\164\x5f\x66\145\x65\144\137\x61\x64\x6d\x69\x6e\137\x6e\157\x74\151\146\x69\x63\141\x74\x69\157\156\163\137\x6c\141\163\164\x63\x68\145\143\153"); } public function setLastUpdate() { $this->_cacheManager->save(time(), "\x6d\x67\x74\x5f\x66\145\x65\144\137\141\144\x6d\151\156\137\x6e\157\x74\x69\x66\151\x63\x61\164\x69\157\156\163\137\x6c\141\163\x74\x63\150\x65\x63\x6b"); return $this; } public function getFeedData() { try { goto A59ed; ef335: $httpClient->setParameterPost($postParams); goto Ff899; c79ee: f45f2: goto c4df5; f2cd9: $postParams = ["\x73\x68\x6f\160\137\165\162\154" => $this->storeManager->getStore()->getBaseUrl(), "\166\145\162\x73\x69\x6f\x6e" => $this->productMetadata->getVersion()]; goto Cb4fb; Cb4fb: $config = ["\x61\144\141\x70\164\x65\x72" => HttpClient\Adapter\Curl::class, "\143\165\162\x6c\x6f\x70\164\151\157\x6e\x73" => [CURLOPT_FOLLOWLOCATION => true], "\x6d\x61\x78\162\145\144\151\162\x65\x63\164\163" => 0, "\164\151\155\145\157\165\x74" => 30]; goto cc0d8; Cfd65: if (!(200 == $response->getStatusCode())) { goto f45f2; } goto fe12a; cc0d8: $httpClient = new HttpClient(self::FEED_URL, $config); goto d5b45; Ff899: $response = $httpClient->send(); goto Cfd65; d5b45: $httpClient->setMethod("\x50\x4f\123\124"); goto ef335; A59ed: $xml = ''; goto f2cd9; fe12a: $xml = new \SimpleXMLElement($response->getBody()); goto c79ee; c4df5: } catch (\Exception $e) { return false; } return $xml; } }
